// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "penppml_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// eigenMatMult
SEXP eigenMatMult(Eigen::MatrixXd A, Eigen::MatrixXd B);
RcppExport SEXP _penppml_eigenMatMult(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenMatMult(A, B));
    return rcpp_result_gen;
END_RCPP
}
// eigenMapMatMult
SEXP eigenMapMatMult(const Eigen::Map<Eigen::MatrixXd> A, Eigen::Map<Eigen::MatrixXd> B);
RcppExport SEXP _penppml_eigenMapMatMult(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenMapMatMult(A, B));
    return rcpp_result_gen;
END_RCPP
}
// AtA
Eigen::MatrixXd AtA(const MapMatd& A);
RcppExport SEXP _penppml_AtA(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const MapMatd& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(AtA(A));
    return rcpp_result_gen;
END_RCPP
}
// fastolsCpp
NumericVector fastolsCpp(MapMatd X, MapVecd y);
RcppExport SEXP _penppml_fastolsCpp(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MapMatd >::type X(XSEXP);
    Rcpp::traits::input_parameter< MapVecd >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(fastolsCpp(X, y));
    return rcpp_result_gen;
END_RCPP
}
// fastridgeCpp
NumericVector fastridgeCpp(MapMatd X, MapVecd y, double lambda);
RcppExport SEXP _penppml_fastridgeCpp(SEXP XSEXP, SEXP ySEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MapMatd >::type X(XSEXP);
    Rcpp::traits::input_parameter< MapVecd >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(fastridgeCpp(X, y, lambda));
    return rcpp_result_gen;
END_RCPP
}
// faststddev
NumericVector faststddev(Eigen::ArrayXXd X, Eigen::ArrayXd w);
RcppExport SEXP _penppml_faststddev(SEXP XSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(faststddev(X, w));
    return rcpp_result_gen;
END_RCPP
}
// fastwmean
NumericVector fastwmean(Eigen::ArrayXXd X, Eigen::ArrayXd w);
RcppExport SEXP _penppml_fastwmean(SEXP XSEXP, SEXP wSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd >::type w(wSEXP);
    rcpp_result_gen = Rcpp::wrap(fastwmean(X, w));
    return rcpp_result_gen;
END_RCPP
}
// manyouter
SEXP manyouter(const Eigen::Map<Eigen::VectorXd> A, Eigen::Map<Eigen::VectorXd> B, int c);
RcppExport SEXP _penppml_manyouter(SEXP ASEXP, SEXP BSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::VectorXd> >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(manyouter(A, B, c));
    return rcpp_result_gen;
END_RCPP
}
// xeex
SEXP xeex(const Eigen::MatrixXd X, const Eigen::VectorXd e, const Eigen::VectorXd S);
RcppExport SEXP _penppml_xeex(SEXP XSEXP, SEXP eSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type e(eSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(xeex(X, e, S));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_penppml_eigenMatMult", (DL_FUNC) &_penppml_eigenMatMult, 2},
    {"_penppml_eigenMapMatMult", (DL_FUNC) &_penppml_eigenMapMatMult, 2},
    {"_penppml_AtA", (DL_FUNC) &_penppml_AtA, 1},
    {"_penppml_fastolsCpp", (DL_FUNC) &_penppml_fastolsCpp, 2},
    {"_penppml_fastridgeCpp", (DL_FUNC) &_penppml_fastridgeCpp, 3},
    {"_penppml_faststddev", (DL_FUNC) &_penppml_faststddev, 2},
    {"_penppml_fastwmean", (DL_FUNC) &_penppml_fastwmean, 2},
    {"_penppml_manyouter", (DL_FUNC) &_penppml_manyouter, 3},
    {"_penppml_xeex", (DL_FUNC) &_penppml_xeex, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_penppml(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
